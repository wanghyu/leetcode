/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<double> averageOfLevels(TreeNode* root) {
        deque<TreeNode*> dq;
        vector<double> res;
        if(root) dq.push_back(root);

        int sum = 0;
        double avge;
        while(!dq.empty()) {
            int size = dq.size();

            for(int i = 0; i < size; i++) {
                auto node = dq.front();
                dq.pop_front();
                sum += node->val;
                if(i == size-1) {
                    avge = sum / size;
                    res.push_back(avge);    
                    sum = 0;
                }


                if(node->left) dq.push_back(node->left);
                if(node->right) dq.push_back(node->right);
            }
        }
        return res;
    }
};
//total_testcases:66
//total_correct:46
//input_formatted:[3,9,20,null,null,15,7]
//expected_output:[3.00000,14.50000,11.00000]
//code_output:[3.00000,14.00000,11.00000]
//last_testcase:[3,9,20,null,null,15,7]
