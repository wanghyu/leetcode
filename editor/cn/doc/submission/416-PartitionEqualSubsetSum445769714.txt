class Solution {
public:

    bool canPartition(vector<int>& nums) {
        int sum = accumulate(nums.begin(), nums.end(), 0);
        if(sum % 2 || nums.size() == 1) return false;
        int target = sum / 2;
        //背包最大容量是j， 装上物品后最大价值是dp[j]
        vector<int> dp(target + 1, 0);
        for(int i = 0; i < nums.size(); i++) {
            for(int j = target; j >= nums[i]; j--) {
                dp[j] = max(dp[j], dp[j - nums[i]] + nums[i]);
            }
        }
        return dp[target] == target;
    }
    bool canPartition2(vector<int>& nums) {
        int sum = accumulate(nums.begin(), nums.end(), 0);
        if(sum % 2 || nums.size() == 1) return false;

        int target = sum / 2;
        vector<vector<int>> dp(nums.size(), vector<int>(target+1, 0));

        for(int j = 0; j <= target; j++) {
            if(j >= nums[0]) {
                dp[0][j] = nums[0];
            }
        }

        for(int i = 1; i < nums.size(); i++) {
            for(int j = 0; j <= target; j++) {
                if(j < nums[i]) dp[i][j] = dp[i-1][j];
                else
                    dp[i][j] = max(dp[i-1][j], dp[i-1][j-nums[i]] + nums[i]);
            }
        }
//        printVecVec(dp);

        if(dp[nums.size()-1][target] == target)
            return true;

        return false;
    }
};

//runtime:312 ms
//memory:10.4 MB
